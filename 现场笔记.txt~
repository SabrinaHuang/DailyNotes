2016年4月7日 11:23:29
		react Native的用法
		
		*调用原生iOS控件的法子		
		// 貌似是引用react,并且引用tab和Nav
		var React = require("")
		var {TabBarIOS, NavigatorIOS } = React;
		
		var App = React.createClass({
			// 渲染函数
			render: function(){
				return(
				// 也是用js里对元素的修饰来实现的
				<TabBarIOS>
					<TabBarIOS.Item title = "React Native" selected={true} >
							<NavIOS initialRoute ={{title: 'React Native'}} />
					</TabBarIOS.Item>
				</TabBarIOS>
				);			
			},		
		}	
		);
       

	
		react 模拟iOS中的触摸	
		var React = require("")
		var {ScrollView, TouchableHighlight, Text} = React;
		var TouchDemo = React.createClass({
			// 渲染控件的样式
			render:function(){
				<ScrollView>
				  //  可以渲染事件
				  <TouchableHighlight onPress={()=>console.log('pressed')} >
					<Text>Proper Touch Handling</Text>
				  </TouchableHighlight>
				</scrollView>
			},
		});
	
	
		*在JS里，render表示渲染。给元素添加样式，布局，事件
		
		react 实现iOS里的样式设置
		var React = require('react-native');
		// 相当于import各组件
		var { Image, StyleSheet, Text, View } = React;
		var ReactNative = React.createClass({
			render: function() {
				return (
					<View style={styles.row}>
						<Image	source={{uri: 'http://facebook.github.io/react/img/logo_og.png'}} style={styles.image}/>
						<View style={styles.text}>
						<Text style={styles.title}>
							React Native
						</Text>
						
						<Text style={styles.subtitle}>
							Build high quality mobile apps using React
						</Text>					
						</View>
					</View>
		);
	},
	});
	
	// react Native提供各控件渲染样式的stylesheet
	var styles = StyleSheet.create({
		row: { flexDirection: 'row', margin: 40 },
		image: { width: 40, height: 40, marginRight: 10 },
		text: { flex: 1, justifyContent: 'center'},
		title: { fontSize: 11, fontWeight: 'bold' },
		subtitle: { fontSize: 10 },
	});
		
	
	*npm（node package manager） 功能同cocoPods,用于分发和管理NodeJS包
	
	
	*NodeJS  是基于JS runtime的平台。
	
	*runtime 
		是一段程序运行时，除了 bare-metal之外的调用
		特点是：
			1、在程序运行时，介入的频率不是太高
			2、由此语言独享
			
			
	// 	react 本身融入 JS的API，比如XMLHttpRequest,navigator.geolocation等
	var React = require('react-native');
	var { Text } = React;
		*指定了三个对象
	var GeoInfo = React.createClass({
		getInitialState: function() {
		return { position: 'unknown' };
	},	
	
	componentDidMount: function() {
		navigator.geolocation.getCurrentPosition(
			(position) => this.setState({position}),
			(error) => console.error(error)
		);
	},
	
	render: function() {
	   return (
		  <Text>
			Position: {JSON.stringify(this.state.position)}
		  </Text>
		);
	   },
	});
	
	
	//  react可以重用原生代码。做法是包装对JS可用的功能，并用RCT_EXPORT_MODULE() 显式导出	
	// Objective-C,封装了原有的类，让JS可通过RCT_EXPORT_METHOD
	#import "RCTBridgeModule.h"
	@interface MyCustomModule : NSObject <RCTBridgeModule>
	@end

	@implementation MyCustomModule
	RCT_EXPORT_MODULE();
	// 通过这个宏就能暴露原生接口
	RCT_EXPORT_METHOD(processString:(NSString *)input callback:(RCTResponseSenderBlock)callback)
	{
		callback(@[[input stringByReplacingOccurrencesOfString:@"Goodbye" withString:@"Hello"];]]);
	}
	@end
	
	// JavaScript  
	var React = require('react-native');
	var { NativeModules, Text } = React;
	
	var Message = React.createClass({	
		render: function() {
			getInitialState() {
				return { text: 'Goodbye World.' };
			},
		// 在此处调用了原生的API	
		componentDidMount() {
			NativeModules.MyCustomModule.processString(this.state.text, (text) => {
				this.setState({text});
				});
			},
		
			return (
				<Text>{this.state.text}</Text>
			);
		},
	});	
	
	
	// react可以重用原生UI，方法是在RCTViewManager的子类里实现-(UIView *)view。需要调用时用RCT_EXPORT_VIEW_PROPERTY暴露。
	
	//  OC代码
	#import "RCTViewManager.h"
	@interface MyCustomViewManager : RCTViewManager
	@end
	// 调用此view
	@implementation MyCustomViewManager
		- (UIView *)view
		{
			return [[MyCustomView alloc] init];
		}
		// 向JS暴露属性
		RCT_EXPORT_VIEW_PROPERTY(myCustomProperty);
	@end	
	
	// JS代码
	// 生成一个模型
	module.exports = createReactIOSNativeComponentClass({
		validAttributes: { myCustomProperty: true },
		uiViewClassName: 'MyCustomView',
	});
	
	
	*Java平台（Java platform）。是一套工具，包括Java虚拟机和Java Core。可以在任意操作系统上为Java程序提供统一的编程接口
	
	*.NET平台，（.NET platform）。是一套工具，包括了CLR和framework类库。
	可以为任意操作系统上的纯.NET程序提供统一的编程接口。
	
	*生态环境	影响生物生活和生产活动的各种力量（物质，能量，作用）的总和
	
	*模型	用材料或虚拟来表现形态和结构。(重点是表现)
	
	
	// 如何渲染图片
	1、在index.XXX.js里
		
	【JAVA开发环境设置】
	 *jdk(Java Develop Kit)
	 是专供Java用的开发环境，所有的java程序都要在它上面构建。包括了一组API		
		
	 *Java SDK 
	  相对宽泛的概念。是辅助开发Java的相关文档、范例和工具的集合
	 
	 *开发服务器
	 	"服务器"是根据设备功能来划分时对设备的称呼.能给其他设备提供服务的,就是服务器.开发服务器就是提供开发程序,编译程序服务的机器.而目标机则是部署,运行程序的机器.
	 	
	 *配置java开发环境
	    这个真心很麻烦
	    ~首先要下载jdk
	    地址:http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html
	    oracle提供的java开发专用库
	    
	    ~然后要下载SDK
	    用android SDK Manager
	    因为我国的特殊国情,需要使用代理
	    镜像:mirrors.neusoft.edu.cn  
	    端口:80
	    
	    按照环境配置的要求下载各种SDK
	    
	    ~然后要配置路径,供java程序找到对应的sdk
	    Mac系统中:
	    cd ~  (~表示用户目录  /Users/用户名 )
	    然后在 .bash_profile文件里配置 ANDROID_HOME环境变量(.表示文件隐藏)
	    
	    顺便介绍配置的方法
	    sudo vi .bash_profile
	    然后粘贴
	    
	    vi 在打开时默认为命令行模式,按i进入编辑模式
	    返回命令行模式时,按  shift + :
	    wq是保存+退出
	    
	    ~在window系统下
	      在环境变量-> path变量里添加
	    
	    
	    
	    