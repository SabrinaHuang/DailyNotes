
	
	function todos(state=[],action){
	// 返回一个数组，数组里添加一个对象
	switch(action.type){
		case 'ADD_TODO':
			retrn [
			...state,{
			text:action.text,
			completed:false
			}];

		case 'COMPLETE_TODO':	
			return [
				...state.slice(0,action.index),
				Object.assign({}， state[action.index],{completed:true}),
				...state.slice(0,action.index + 1),
			];

		default:
			return state;	
	}}

	// 需要导入映射表Reducers和映射表对应的驱动store
	import { combineReducers, createStore  } from 'redux';	

	let reducer = combineReducers({visibilityFilter, todos });
	let store = createStore();


	function counter( state = 0, action ){
		switch(action.type){
			case 'INCREMENT':
				return state + 1;
			case 'DECREMENT':
				return state - 1;
			default:
				return state;


	props还有解构赋值的属性，


	在JS中注释块时，除了 /**/之外，还要用{}， // 同理，不过//对应的{}要分行

	react-native和react的差别在于前者用的是JSX语法，不能用html里的组件。只能用类似的组件，比如View对应css里的div, text对应css里的span

	
	受控组件，其显示需要通过自己的state来刷新
	比如
		picker

		通过其selectedValue驱动组件
		而selectedValue要绑定到 this.state.someVal
		this.state.someVal通过onValueChange的回调刷新

		这些组件的value需要绑定到某个变量上，随变量而变

	比如
		textInput 有value属性，绑定到state上
		然后 在onChangeText里，(val) => this.setState(  );


	模型可以描述实体的定义，实体的操作，实体操作的结果，实体的管理限制。
	比如表就是关系模型的实例



	react-native的真机调试
		在RCTWebSocketExecutor里，将setUp方法里的URL指定为开发服务器的地址
		在appDelegate里，将App对应的localhost指定为开发服务器

		重新启动项目，摇晃调试机，在弹出的菜单中选择JS Remotely Debugging
		在chrome浏览器里，三横线菜单-> more Tools -> Developer Tools

		不调试时摇晃出菜单，选 disable remote load		 


	JS是典型的层级对象结构，以<Text> Entitya + Entityb + Entityc </Text> 为例，会将 a b c 当做对象，以对象串联的方式连接。如果在其中用 + 等符号，因为对象本身没有定义+操作，所以会将 + 当做对象来处理， 返回的结果是 %22Entitya.value + Entityb.value + Entityc.value%22 这样的字符串


	JS里的大小写敏感
		一定要注意这点。因为JS非编译性语言，没有语法检查功能和标志检查功能，写错标志也不会提示。

	没有<br/>或者\n可以折行，需要分行时，用text标签	



	当组件的props（一般都是些框架性的配置）变化时，会触发
	1、 componentWillRecProps
			将要接收
	2、 shouldCompUpdate()
			接收前夕
	3、compWillUpdate()
			将要渲染
	4、render()
			渲染

	

	RN VS. reactNative  抽象层相同，但有差异，前者用于移动端开发，后者用于web开发

	package.json里，逗号有严格的规范，dependencies 里最后一项值不应以逗号结尾。


	js里，需要和业务无关的utils，用于配置
		比如
		1、尺寸配置  pixel,width,height

		2、网络请求，包括封装好的post
			post(url,data,callback)
			和
			host,login,getUser,updateUser,deleteUser,createUser等接口的地址

		3、以首页的开发为例
			设置



	引用工程时，
	1、 到node_modules（提供node工具），调用Library里特定工程的xcodeProj，例如address_book.xcodeProj

	2、 在此xcodeProj里，从build Phases里添加静态库



	props可通过父控件传给子控件，比如 <CustomView  customID1 = value1 customID2 = value2  />

	例如：
		在CustomView的处理中，可通过 this.props.customID1 获取对象
	customID1的值也可以是方法， 比如 (value) => { this.setState({state1:value} ) }  (这里value如果是单值，就写成单值。如果是对象，就要展开为{...value})


	当父控件传给子控件的prop改变时，往往需要通过组件的生命周期方法来相应地更新子控件

	例如
	<View style={a,b,c}>
		<CustomComponent {...this.state}/>
	</View>

	当view的state改变时
	在CustomComponent.js里,props改变，不能触发事件

	于是在生命周期事件，setState,从而触发重渲染
		componentWillReceiveProps(){
			this.setState({});

		}


	props,state,variable在调用时，形式不同。props，state都要加this.的前缀，以表示引用，
	var因为是全局变量，所以直接通过名称调用即可
		

	生成列表时，
	0、 需要数据源
			var data = [{a,b,c},{a,b,c},{a,b,c},{a,b,c},{a,b,c}];
	1、 实现一个数组
			var items = [];
	2、 将数据循环填入
			for( var i in data )		
			{
				let item = (
					<View>
						<Text>{items[i].value}</Text>
					</View>
				);

				items.push(item);
			}	


	3、将数组放入组件来渲染
			<View>
				{items}
			</View>		



	导入和导出
		export class customClassA{……………………}  // 此处没有default关键词

		import {customClassA} from // 需要用{}将其囊括起来，否则会导入默认的组件		


	this.setState is not a function ,出现本问题往往由于在调用时未bind到this，导致动作没有发起对象。	

	connect函数，第一个参数将state的值（此state来自reducer方法里的state）绑定到props上


	源文件要写成 {uri:'https://weibo.com/vczero'}



	网络请求可以封装
		需要url, data和回调

		url是fetch方法的必填参数，data是fetch的第二个参数，是optional的。callback必填，是fetch的回调

		封装时
			var fetchOptions = {
				method:'POST',
				headers:{

				},
				body: JSON.stringify(data)
			}

			fetch( url,fetchOptions )
			.then( (response) => response.text() ) 
			.then((responseText)=>{
				callback(JSON.parse(responseText));
			});

			
			-----GET方式-----
			在url里，可以直接写上请求
			'url?response_type=code'
			+ '&state=1234'
			+ '&view=wap'
			+ ………………

			这叫get方式

			-----POST方式-----
			而在post方式里，会创建表单实体，并将实体作为option传出去

			List param = new ArrayList();
			param.add(obj1);
			param.add(obj2);
			Entity  entity1 = EntityWithParam(Param);

			// 将param传给post请求实例
			Post.setEntity(entity1);
			HttpResponse.execute(Post);



	实现网络请求时的一般步骤
		网络请求的数据流向
			客户端访问服务端 -> 服务端访问mock接口 -> mock返回数据给服务端
			-> 服务端数据给客户端


		接口配置时，最重要的是url和action  url	


	
	网络请求fetch的用法
		最简单的，直接请求某个url，返回的是html页面的报文

		稍复杂一点的是get用法，具体是
		fetch('http://server/app.do?key1=value1&key2=value2&key3=value3');

		再复杂一点的是post用法，
			post时需要option，为请求时的头文件，标志了请求时的一些全局参数
			一般形式是:

			1、 传统的form方式
				var Opt = {
					method:'POST',  // 必填，表示请求方式
					header:{
						'Content-Type': 'application/x-www-form-urlencoded',
					}, // 必填，类似<DOCUMENT />里的meat标签
					body: 'key1=value1&key2=value2'
				}

				fetch(url,Opt);


			2、 新型方式(与时俱进者一般采用的方式)				
				var Opt = {
					method:'POST', 
					header:{
    					'Accept': 'application/json',
    					'Content-Type': 'application/json',
					}, 
					body: JSON.stringify({
						param1:'value1',
						param2:'value2'
					})
				}

				fetch(url,Opt);				


				


	SVN更改工程时，需要更改三处
		以移动文件为例
			1、在SVN库里move文件
			2、在物理路径下查看并更改（如果在第一步里的更改没有影响物理路径，需要更改一下）
			3、在工程里更改文件的位置


	
	更名文件时，应当先在svn更改名称（这更改比较贴近物理路径更改，是更本质，决定性的更改）
	然后到工程里做相应文件的配置更改


	产生treeConflict的原因是svn上的文件结构改变了（参考windows的目录结构图），比如改名，移动，删除
		当update时，只要远程和本地的更改的某一个包含这种操作，就可能出现问题



	在传递props时，获取时可以在方法内直接写 const{XXX,XXX} = this.props 这样在方法里调用时就不用写this. 来表示组件
	
	但倘若是不在同一个大括号里，那引用时就要用this.method

	当需要给onPress这些赋予事件时
		第一种是直接执行的 ()=> method(param)	
		第二种是将方法绑定过去 method



	style也可作为参数来传递
		在定义时
		class List extends Component(

			render{
				const {style,elementStyle} = this.props;

				return(
					<View style={style}>
						{
							elementStyle.map( 
								(element) =>
								<View style={styles.element} />  // 在用map方法调用时，需要添加styles前缀，而直接调用属性时，不需要此前缀
							)
						}
					</View>						
				)
			}
			)
		)

		在调用时

		<List  style={styles.style1} elementStyle={styles.style2} />

		const styles = StyleSheet.create({
			style1:{

			},

			style2:{

			},
		});


		关于const 定义的类型，其作用域就是包裹它的括号。比如

		method1(){
			// do sth
		}


		render(){
			const {val1} = this.props;

			<Text onPress={method1.bind(this)} ></Text>
		}

		method1是无法访问 val1属性的，因为它和定义val1的render同级，如果它被包含在render()里，那就可以


		做应用授权的步骤
			1、生成访问授权页面的url, authUrl
			2、让webView组件的source = {{uri:authUrl}}
			3、实现页面跳转的响应方法，其中应该有获取accessToken的方法
			4、令webView的onNavChange响应为此页面跳转

			5、需要注意，页面布局时，应当在state里设置code属性，在页面布局时
				this.state={
					code:null,
				}

				this.state.code?
				<WebView {...props}/>
				:
				<Text>{this.state.code}</Text>

				而在授权方法里，当请求完accessToken后，
				this.setState({
					code:code
				})

				这样请求成功后，就可以展示自定义的页面

			关键是要细心地模仿他人的步骤，不可随意删减，更改和移动

			比如我之前并不知道 this.state.code的关键用法。导致即使授权成功，也无法跳转页面

			

		
	   WebView不但可以展示html,也可以直接通过网络请求获取数据，从而将结果展示在页面
	   目前可以先用GET方式请求，以免拼接字符串时出现问题。返回的数据不要以html格式展示出来。直接显示在页面上就好。		


	   js是一种很强大的语言，不但可以用于开发前端页面，也可以通过Node框架的支持，用于开发后端服务器


	   在新版的语言里，引用propTypes时，需要  import {Component,PropTypes} from 'react';  而不是import from 'react-native'

	   使用var时，不管是在哪个域里，都会覆盖之前的同名定义，必须用const才能确保不被覆盖，保持原有的值

	   
	   出现RCTView找不到，或者其他RCT开头的文件找不到时，最大的可能是没有用npm安装相关的Node三方库


	   UnableToResolveError: Unable to resolve module ReactDefaultPerf 通常是因为react版本和react-native版本不匹配，这点在npm install时会给出相应提示


	----python抓取图片的方法----   
	http://www.2cto.com/kf/201303/194314.html
	http://www.oschina.net/code/snippet_1242232_26489



