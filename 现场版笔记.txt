一种框架，用于管理 JS里的state

	state关联的反应： 变化 & 异步



#同构应用开发	#
	server和client可以共用一套模板，在为react进行服务端渲染时不必再写一份特殊的模板
	

store.getStates()

{
	filter:'SHOW_ALL',
	todos:[{
	text:'Consider using Redux',
	completed:true,
	},{
	text:'keep all state in a tree',
	completed:false,
	}]
}

store.dispatch({
		type:
		index:
});


(	state = ,action	){
	
}


React:
	1. virtual Dom  虚拟的文件模型？？？

	2. 分外层和内层，外层是纯的界面表现，内层是state和状态，用于交互

	3. 


前端设计基本要则:
	1 快速实现基本UI
	2 UI绑定到model
	3 用户交互
	4 UI管理，UI调用其他UI(父子关系)


Redux



数据库的三层模式和两级映射
	三层模式就是三种数据结构
	外部  概念（全局）  内部

	局部VS整体    概念VS存储

	适用于用户层面的
	适用于管理员层面
	适用于数据库开发人员的层面



JS的语法特性
	封装，用户不知道操作的实现细节


作用域链指定了函数能访问的变量们


JavaScript

	1、 document就是对页面的引用。 document.write 可以在页面里插入内容

	2、 document.getElementById("XXXX") 用于获取页面元素,这种操作基于DOM模型，每个节点都是document里的一个对象，都可以被访问

	3、 if isNaN()  判断字符串是否纯数字

=======学了三种语法==================
	声明的方法
	var title="param1";
	var title1 = "t1",title2 = "t2",title3 = "t3"; // 逗号分隔


	4、 <Script></Script> 插在 head体 或 body体里
		例如
		<head>
			<script>
				function myfunction(){
				document.getElementById("demo").innerHTML();
				}
			</script>
		</head>


脚本语言的特点：浏览器逐行读取，执行代码。没有编译

<p id="param1"></p>
var Demo1 = "key";
document.getElementById("param1").inner













