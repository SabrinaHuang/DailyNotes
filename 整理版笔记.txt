	#java基础#
		#配置开发环境#
		   概念：
			jre(Java SE Runtime Environment):作用类似虚拟机，可以在任意操作系统上为Java程序提供统一的编程接口
			jdk(Java Develop Kit).是一组API，专为java提供开发环境，所有的java程序都要基于它来构建
			Java SDK：辅助开发Java的相关文档、范例和工具的集合
			开发服务器：用于开发和编译程序的机器。

		  步骤：
		    0、下载并安装jre
		  	1、下载jdk http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html
		  	2、下载SDK,在android SDK Manager里，设置代理 镜像:mirrors.neusoft.edu.cn  端口:80
		  	3、配置路径，（只讲述Mac机），在/Users/当前用户名/ 路径下，建.bash_profile文件,在文件内添加
		  		ANDROID_HOME = jdk路径
		  	4、	

	#通用知识#
			委托在OC下的实现
				1、需要协议文件，主调方（一般是框架类），被调方（实现协议的类）
				
				2、-------------------协议文件-------------------
					XXXdelegate.h
					需要协议作用域
					@protocol
						@required
						-(void) sleep;
						-(void) work;
						-(void) eat;						
					@end
			
				3、					-------------------在调用协议的类里-------------------
					Frame.h 
					#include XXXdelegate.h
					@interface  XXX:NSObject

					// 自己的变量
					{
						var1;
						var2;
					}

					// 对类的引用
					@property  id <XXXDelegate> delegate
					//自己的方法
					-method1;
					-method2;
					@end

					Frame.m
					-method1
					{
						[self.delegate sleep];

					}	
					-------------------在调用协议的类里-------------------
					
					
				4、					-------------------在实现协议的类里-------------------
					.h
					@interface XXXobj:NSObject<XXXDelegate>
					@end

					.m
					-init
					{
						Frame *frame = [Frame new];
						frame.delegate = self;	// 让主调方可调用此协议类
						frame.start;	
					}

					-(void) sleep;
					-(void) work;
					-(void) eat;	
					-------------------实现协议的类-------------------


				例如 关联到textField的viewController,就是被textField驱使来做协议类的类
				
				遵循了<TextFieldDelegate>协议，
						viewController<TextFieldDelegate>
				
				并实现了协议里的方法
						-textDidEndEditing()
						{
							…………………………
						}
					
				还要让textField认其为协议类，让textField将事件发给它
					textField.delegate = self;
			

		平台：一般是一套工具包。可在任意操作系统上为特定语言编写的程序提供统一的接口
			例如
				Java平台（Java platform）。是一套工具，包括Java虚拟机和Java Core，在任意操作系统上为Java程序提供统一接口
				.NET平台，（.NET platform）。是一套工具，包括了CLR和framework类库，在任意操作系统上为.NET程序提供统一接口

			cocoapods:
				用于管理OC三方库的工具包
					要编写Podfile文件

				----------------podfile内容--------------	
					platform:ios,  '7.0'
					target "targetName" do   // 指定依赖项,target表示工程项目，如工程名为loginDemo,则targetName为loginDemo

					pod 'JSONKit',    '~> 1.4'

					end

				----------------podfile结尾--------------	
				
					Podfile放在工程根目录下
					在根目录下，命令行
					pod install

				有时会报symbol(s) not found for architecture arm64，是因为搜寻的目录的起始目录太深，
				在Build	Settings -> other linker Flags里添加 $(inherited)即可


			npm:
				用于管理Node.js工具包  
				使用方法是：
					sudo npm install
					
					可选参数 -g
					
				用-g 表示全局安装
				全局安装的特点是:
					1 包在 /usr/local里
					2 在工程里不能通过require调用
					
				不加 -g就是本地安装,安装时
					1 包在node_modules目录下
					2 在工程里通过 require('XXXpackage')来调用	
			
			homebrew:
				用于安装linux程序，如brew install python3，可以安装python
				
			runtime:是程序运行时，除了bare-metal之外的调用
				特点：
					1、在程序运行时，介入的频率不是太高
					2、由此语言独享					


#react-native开发基础#
			概念：
				NodeJS：是基于JS runtime的javascript开发平台。ReactNative的开发基于JS语言
				npm（node package manager）：可以抓取各种三方组件，比如github上的组件
					工程做版本管理时，不用提交node_module(这里是所有的插件，组件包)，提交工程根目录里的package.json 然后在工程根目录里npm install即可
				
					如果要添加三方组件,如名为react-native-nav的组件,要到node_module目录下
						npm install react-native-nav --save
					调用时 
						import react-native-nav from 'react-native-nav';
						
						
					参数会影响安装行为
						例如 sudo npm install npm -g 这-g 表示全局安装
				
						-g 是全局安装
							1 包在 /usr/local里
							2 在工程里不能通过require调用
					
						不加 -g是本地安装
							1 包在node_modules目录下
							2 在工程里通过 require('XXXpackage')来调用
					
			语法
				this.setState 用于改变属性,属性更改后，会触发render(){}; 重新渲染界面
				
				let name = 'firstComponent'用于定义变量				
				
				LBS (location based service)一类应用的统称，比如大众点评的‘我附近的’就是这样的功能。
				
			技巧
				RN在需要引用和表示路径时
					.表示上一级路径
					..表示上二级路径
				
				真机调试时，如果出现了webSocket Connection fail ,很可能是之前编译时打开了serve窗口,没有关掉.关掉即可.
				
				#JS调用原生页面#
					1、原生的view要继承RCTViewManager
						.m
						@interface RCTcustomViewManager:RCTViewManager
						@end
					
					2、	实现-(UIView *)View 方法
						.m
						-(UIView *)View{
							……………………
							……………………
							return view;
						}
						
					3、实现一个接口文件（其实这里我就不太懂了）
						
						--------------------导出原生的文件--------------------
						CustomView.js
						import React,{
    								DeviceEventEmitter,
    								requireNativeComponent,
    								PropTypes
    					} from 'react-native'

						// 如果需要监视原生组件的事件，可用EventEmitter
						
						var customView = createClass(
						
						
						componentDidMount(){
							EventEmitter.addListerner('ZBarCodeRead',this._onRead);

							// 第一个参数ZBarCodeRead是另一个组件里的方法，这个是在原生里，用bridge.ModuleXX 方法生成的
							// 第二个参数_onRead是本组件的方法，第二个参数指定的方法监听第一个方法
						}
						
						// 负责监听的方法
						_onRead(){
							// 可以通过props将JS方法传给本组件，从而执行具体的业务操作
						}
						
						)						

    					// 如此即可导出组件，标签名为RCTXXX
						module.exports = requireNativeComponent('RCTXXX',null);

					--------------------导出原生的文件--------------------
						
						var { requireNativeComponent } = require('react-native');
			
						// 定义输出,名称是之前的.m去掉词尾的manage
						modle.exports = requireNativeComponent( 'RCTcustomView',null );
			
					4、在JS中调用此接口文件
						import RCTcustomView from './AppComponent/CustomView'
						
				
				#图片显示相关#
					dp表示像素密度，比如某手机宽1.5inch，而分辨率为240 * 320
					则dp = 240 / 1.5 = 160; dp和dip是一个意思
					
					pt:point 表示一像素点对应几个pt，是apple自己搞的概念。在一般屏上，pt = 1
					在Retina屏上，pt = 2
					
					在RN里，表示尺寸时，单位是pixel
					
					PixelRatio.get()能获取pt值
					对android  PixelRatio.get() == 1
					对iphone   PixelRatio.get() == 2
					所以用	1/PixelRatio.get()能获取点数					
				
					另外，也可用于决定普通或高清设备上的分辨率
						var image = getImage({
							width:PixelRatio.getPixelSizeForLayoutSize(300),
							height:PixelRatio.getPixelSizeForLayoutSize(200),
							});
			

					版本管理时，需要添加到ignore列表的是中间文件和最终的exe
						需要本地生成的是第三方库，用npm来安装
			
				JS调原生
					封装原生模块供react使用								
								第一步:
									让原生代码遵循RCTBridgeModule的协议,在.h文件里
									@interface CalendarManager : NSObject <RCTBridgeModule>
									@end	
								
								第二步,在.m文件的@implement @end里,添加协议的实现								
									RCT_EXPORT_MODULE();
								
								第三步,给要导出的方法添加RCT_EXPORT_METHOD()宏
									RCT_EXPORT_METHOD(addEvent:(NSString *)name location:(NSString *)location)
									被导出的方法的返回值必须是void
									
								第四步 在js里调用
									var CalendarManager = require('react-native').NativeModules.CalendarManager;
									CalendarManager.addEvent('name', 'Shanghai');
								
								第五步  倘若方法有回调,回调对象只能是RCTResponseSenderBlock
									   并且在调用块时,第一个参数是NULL,第二个参数才是真正传给JS的参数
									RCT_EXPORT_METHOD(findEvents:(RCTResponseSenderBlock)callback)
									{
									    // 获取值,是一个数组
										NSArray *events = 
										// 传值
										callback(@[NSNull[null], events]);
									}
									
									在js里
									var CalendarManager = require('react-native').NativeModules.CalendarManager;
									CalendarManager.findEvent((Events)=> {										
									})
				
								小结：就是js主调，给原生参数，用原生功能。回调，获取原生参数，给原生功能。恰好相反。回调时的参数要遵循原生的法子，否则扣不出来
								
								
				
				
						prop和state
								prop是传给对象的参数,例如
								 var Hello = React.createClass({
								                 render(){
								 	 				return <div> Hello {this.props.name}</div>;
	 									 		}
	 									 	});	
								
	 							 < Hello name = "sabrina" />
	 							 
	 							 则html页面上显示为
	 							 Hello  sabrina
	 							 
	 							 state是组件本身的属性,当state改变时,会reload界面.
	 							 比如从网络上下载数据并填充到表格里时,会有个state叫dataSource,网络请求改变了state.页面会刷新显示,将数据展现出来.
	 							 具体可见http://sentsin.com/web/1120.html里关于展示25部电影的段楼
					
				技术
					Android真机调试的步骤
						1 开启手机的调试模式
						2 手机USB连接Mac机,最好当前只有一台设备连到Mac机,模拟器等也不要打开
						3 用adb devices查看设备,如只有一个dev,说明连接正确
						4 终端的路径为工程的根目录, 命令行是react-native run-android
						5 开启目标机的悬浮窗设置 设置 -> 其他应用管理 -> 选中app -> app操作菜单之权限管理 -> "显示悬浮窗"设置为true
						6 摇晃手机,在浮现的菜单里选"Dev Settings" -> Debugging -> 在弹出的对话框里填上开发服务器的ip和端口.返回,重启app,即可正确显示js
						7 需要调试时,摇晃手机,在浮现的菜单里点选 "Debug in Chrome",在弹出的chrome里选择 列表 -> 其他工具 -> 开发者工具,即可在弹出窗体的debuggerWorker.js里,用断点调试.
					
					install是大部分管理用程序都有的命令，如npm install, pod install,前者配合文件package.json使用，后者配合podfile使用，就像makefile和脚本配合一样
						
					RCT语法
						require:
							用于加载模块，require( 'XXXX' ),这里的XXXX是文件或者路径，总之是资源（和网络编程的概念类似）
					
						常用函数
							render:实现样式,渲染样式,用JS调用样式
							
							const styles = StyleSheet.create(
							{
								container:{
								flex:1,
								},	
							});用于实现样式,好处是不可更改,不可见,而且只在mount时加载,不用每次render去刷新时都加载
							
							所有的数据,都要用{}括起来,如{this.prop.name},如{this.state.container}
							
					
					
					图像显示技巧
						   FPS:帧率								
						   	每秒应该展现的图片数,标准为60,也就是每16ms需要生成一张图片,倘若开发者和UI系统无法在此时间内生成一张图片,则界面会卡顿.
							
						   	掉帧
						   		每秒展示的图片数小于FPS所对应的,应有的帧数
						   	
						   	push新页时可能卡顿的原因
						   		js需要绘制所有组件,所以必然会占用时间,图片生成所需时间大于FPS对应的最大时间.页面就会出现卡顿
					
					
					布局：
							布局无非横排和竖排两种
							横排
								1 最外面的flex为1  flexDirection 为'row'  justifyContent为'center' 让item居中排列，较美观
								
								2 内部容器如果占用宽度均分，不用做任何修饰  如果需要内容居中
								在外层容器里添加alignItems:'center'属性
								
								3 如果有某个容器需要撑开，比如导航栏里左中右，中间的撑开，
								那设定其flex:1
								
								4 貌似flex为row和justifyContent配合用（都是水平的），而flex为column和alignItems(都是竖的)配合着用
								

					点击事件的实现			
						用TouchableOpacity组件嵌套需要点击事件的组件
						_pressText(){}
						<TouchableOpacity onPress = this._pressText.bind(this) >
							<Text>点我跳转</Text>
						</TouchableOpacity>						
						
					
				   list的实现
							1 将数据封装到界面中
							  Arr.js
							
								render(){
									var newsArr = [];
									for( var i in this.props.news ){
										var text = (
											<Text>
												{ this.props.news[i] }
											</Text>
										);
										newsArr.push(text);
									}
								
									return(
										<View>
											<Text>第一行是标题</Text>
											{newsArr}
										</View>
									);									
								}
								
							2 调用
								main.js
								import Array from './Arr';
								
								<View>
									<Array news={['a','b','c','d','e','f','g',]} />
								</View>
								
						
						tabBarIOS和tabBarIOS.item
								<tabBarIOS>
								    <tabBarIOS.item>
								    	<View />
								    </tabBarIOS.item>
								    <tabBarIOS.item>
								    	<View />
								    </tabBarIOS.item>								    
								    <tabBarIOS.item>
								    	<View />
								    </tabBarIOS.item>
							    </tabBarIOS>
						
						引用图片
							<Image source={require('./image.png')} />
						
					组件的封装
							1 写js,在js里创建组件
								scroll.js
								export default class AdScroll extends react.Component(
									……………………
									……………………
								)
								文件放在根目录下
						
							2 在com.ios.js里调用它	
								import AdScroll from './scroll'
								
							3 直接当组件用
								<View>
									<AdScroll />
								</View>

					
					容器嵌套时的的属性影响
							最外层的container,设置自身的flex(延展,充满界面)
							还要设置内部容器们的排列次序和flex顺序
							
							内层容器则相对简单,主要是字体,背景色,行距等
							<View style={[styles.item,styles.lineLeftRight]}>
								<View style={[styles.flex,styles.center,styles.lineCenter]} >
									<Text>额2</Text>
								</View>
								
								<View style={[styles.flex,styles.center,styles.lineCenter]}>
									<Text>蛤2</Text>		
								</View>				
							</View>  							
								
								
							
#css布局基本知识#				
			概念：
				DOCTYPE关键字: 在浏览器解析时告诉它,应以第几代HTML规则解析文本
				
				HTML: 用于编写网页的语言.更严谨更高级的叫XHTML
				
				CSS:  实现页面表现形式的语言
				
				选择器:用于检索标签的关键字，一般出现在<head><style></style></head> 里
					分为
						标识选择器  为元素的标签名，如 p,span,body,h1,ul等
						
						类选择器  为类名，作用在指定了相应class的标签上，如
							.marginBox{
								padding:40px;
							}
							
							<span class="marginBox"></span>
							则此标签拥有padding:40px的属性
							
						id选择器  作用在指定了相应id的标签上，如
							#one{
								margin:20px;
							}
							
							<p id="one">the pad using style one</p>
							
						*全局选择器
							文档里的所有元素都染上此标签的属性
						
						如果一个标签的某属性有多个选择器来关联,则决定属性值的优先级为
							行内样式> id样式> 类样式> 标志样式
							CSS里的层叠,说的就是这回事
							
							另外一种情况下,如果div的样式和内嵌的样式重复,取后出现的,这叫覆盖,以出现的先后来决定,而不以选择器类型决定
				
				样式赋值的技巧
						在div标签中,多个属性可以在同一个标志上指定,如border
							border: 2px black groove定义了边框宽度,颜色和样式三种属性
						
						或者在div中,对边框的上,右,下,左依次赋值
							border-color:red gray orange blue 
							上红色,右灰色,下橘色,左蓝色
				
						还可以将样式写成state供调用
							state({
							backBtnFFF:{background:'red'};
							})
							
							<View style= {this.state.backBtnFFF}/>
							
							onPress(){
								this.setState({backBtnFFF:{background:'red'},})
							}
							要注意｛｝用于指定对象，而JS里只认定对象，所以一定要用{}包裹键值对
				
				CSS关联到HTML的适合方法
						如果只有一个CSS要关联到HTML,则可用链接标签
						<head>
							<link href="XX.css"; content="text/style" />
						</head>
						
						如果有多个css要链接,则可以link css的目录,然后在目录里导入引用其他
						
						如果用JS导入CSS,用链接法(目前未接触)
						
				可以组合这些选择器
					合集,样式为
						h1,h2,h3,h4,h5{
								color:red;
						}
					所有名为h1,h2,h3,h4,h5的都是这个属性
					
					交集
						h1.special{
							color:red;
						}
						<h1 class="special"><h1>的有这个属性
						
					子集
						h1 ul li ul li{
							color:red;
						}
						嵌在h1里的ul里的li里的ul里的li元素为此属性
						并且li里的元素也是这个属性						
						
						
					W3C:网页方面的标准化民间组织,主要工作是制订web规范的建议
					
					块元素：
						在开头处自带新开始行的元素，如<p>(段落),<table>(表格)
					
					内联元素：
						开头处无折行的元素，如<span>(多用作段落里部分文本的容器), <img>(图像)
						
					DOM:
						一种编程思维，将文档看成一个对象,文档一般就是html,文档里的组件(component)可以用object.attribute的方式来访问
						
					容器:
						HTML里的每一个标签被称为一个容器,容器里可以套容器,被嵌套的容器传染外层容器的属性
						
						容器的有些属性很重要,主要是设定容器自身大小和容器与外部环境关系的量						
							padding-border-margin,由内而外地设定了一些距离参数
					
					flex-box:
						一种重要的标签,指定了容器的样式,有很多重要属性
							align-content: 指定内部item在竖轴上的对齐方式  flex-end 靠底部对齐 center 居中对齐
							space-around: 指定item周围环绕的空白
							flexDirection:  指定内部item是横着排列还是竖着排列
							
							
					Div:
						一种重要的标签,用于设定被包裹的content的padding, border, margin属性.还能指定样式
						如
						<head>
						 <style>
						 		div{
     								border-width: 6px;
     								border-color: #000000;
     								margin: 20px;
       								padding: 5px;
     								background-color: #FFFFCC;
    								}
  						 </style>						
  						 </head>
  						 <body>
  						 	<div style="border-style: dashed" >  The  border-style of dashed </div>
						 </body>
						 出来的就是一个粗黑点点框,黄背景的The  border-style of dashed文字段落
					
					<ul><li></li></ul>:
							层级样式,类似word里的一级目录/二级目录/三级目录
							
							<ul>
								<li>第一层</li>	
								<li>
									<ul><li>第二层</li></ul>									
								</li>
							</ul>
						 
							在<li>里嵌套<ul><li></li></ul>样式
					
					ES5 VS ES6语法
								对某些旧版的资料,需要转换为ES6语法,因为现有的RCT已全面采用ES6替代ES5
								
								引用react模块:
									ES5
									var  React = require('react-native')
												var {
													view,
													Tab,
												} = React;
					
									ES6
									import React,{
									
									}from 'react-native';
									
									
								导出模块
									ES5
									var MyComponent = React.Create({
													………………
												});
									
									module.exports = MyComponent;			
									
									ES6
									export default class MyComponent extends Component{
													…………
												}
									就像extern和定义放在了一起
									
									
								导入
									ES5
										var MyComponent = require('./MyComponent.js');	

									ES6
										import MyComponent from './MyComponent.js';
								
										
										
			#办公工具使用技巧#
					#jedit使用技巧#
						问题:打开中文文档时出现乱码  解决方案:File-> Reload With Encoding -> 改用GBK编码
			
						常用的设置一般都可在Utilities -> Global Options里找到
						
					#Mac基本用法#	
						路径表示为~ 是Macintosh HD/用户/sabrina
			
						路径不带~,直接 /usr/local表示 Macintosh HD/usr/local  在Macintosh HD/usr/local/bin里,有各种程序对应的脚本
						
			#CSS最常用技巧
				概念
					标准流:默认的布局模板,设置了每个元素的各种属性的默认值
					
					DOCTYPE:关键字,用于指定浏览器解析html文本时遵循的协议
						<!DOCTYPE "-//W3C//DTD XHTML 1.0 Transitional//EN">
					
					meta: 嵌套在head里的元素,用于指定全局信息和发协议时报文头部的信息,包括
					
					meta里的属性http-equiv,content 分别对应头信息里的key和value
						例如
						<meta http-equiv="charset" content="iso-8859-1">
						<meta http-equiv="expires" content="31 Dec 2008">
						则在发给浏览器的文档的头部,会包含
						charset:iso-8859-1
						expires:31 Dec 2008
						
					meta里的scheme
						定义翻译content的格式
						
					body:
						页面上的根节点
						
					块元素:
						html里单独占行,形状为块状的元素,比如段落<p>,比如表格<ul>
						
					内联元素:
						html里不单独占行的元素,比如样式<span>
						
					div
						是一种块容器标识,里面可以容纳各种各样的元素.常见用法是将div里的内容视为独立对象,用于css的控制.
						
					span
						多用于修饰部分文本的样式
						
					
					height
						应尽量少用的属性,因为在不同浏览器里的表现不一样,一般用min-height, min-width, max-width等来表示尺寸
					
					margin,padding,border
						指定块状元素尺寸的重要属性
						
					float,让元素摆脱标准流设定下的位置:
						有三个重要属性
  					     	1 包裹性 如果没设置高度和宽度,会尽量缩小
  					     	2 浮动破坏性 它的下一个标准流元素里的非block元素会环绕
  					     	3 跟随性  浮动元素的下一个元素也浮动 则下一个元素会跟随前一个显示成一行					
						
  					     此外,float:left的元素,即使排在后面,显示时还是靠左.
  					     
  					     
					position的值
						relative:
								相对于标准流时的位置漂移
								
						absolute:
								以最近的非标准流父元素为原点坐标
								倘若没有非标准流元素,则保持做标准流时的位置
						
								例如
								        #outerBox{
            width: 200px;
            height: 100px;
            margin: 10px auto;
            background: silver;
        }
        #innerbox{
            width: 100px;
            height: 50px;
            background: orange;
            position: absolute;
        }
  					    
 		<div id="outerBox">
            <div id="innerbox"></div>
        </div>
        						此时innerbox位置就是static时的位置
        						

        						
        			倘若属性用简写法,当子元素发生层叠时,只要有一个属性冲突,就会覆盖全部属性
              					   例如
              					   <div>
              					   	<span></span>
              					   </div>
              					   
              					   div
              					   {
              					   	font:18px/3 Arial;
              					   }
              					   span 
              					   {
              					   	font-size:3em;
              					   }
              					   
              					   会抹掉三个属性.			
					
              					
              		url
              			用于定位资源,比如
              				background-image:url("head.jpg")
              		
              				
              		九宫格制法
              			body{ 
              				textAlign:center
              			}
              			
              			#grid{
              				margin:0 auto;
              			}
              			
              			.box{
              				width:calc((100% - 6px) / 3)  
              				float: left;
              				height:120;  
              				border:1px;
              			}
              			宽度的算法是:减去边框和margin的宽度,然后需要排几个格子,就除以几

              		
              	常见的左上角有一块文字,而正文环绕此文字时,设计样式为:
              			1 左上角文字设为float,要设置right和bottom的margin
              			2 正文不需要设置margin也不需要设置padding
              	
              			
              	网页的标题为特殊字体时
              			因为字体特殊,很可能大多数用户的环境上没有字体,所以一般用图片来替代
              			              		<h1><span>The title</span></h1>
              		
              		h1{
              			background-image:url("img/")
              		}
              		h1 span{
              			display:none;
              		}
              		
              		这样即可显示图片而隐藏文字
              		
			Navigator:
					概念：
						路由，nav里的每一个obj
						Scene:场景 一个肉眼能看到,展示的画面
						route:路由 每个scene对应的索引,用于标志,定位页面.是nav的灵魂							
						
              		重要方法：	
						initRoute:设置nav对应的第一个路由
						initRoute = {{ name: defaultName, component: defaultComponent }}

						renderScene={(route, navigator) => {
									        let Component = route.component;
									        return <Component {...route.params} navigator={navigator} />
									        }
						
						这是一个回调方法，能获取被调方的参数，在这里，就是后入栈的Scene获取前一个Scene的参数，包括navigator 和当前应该展示的scene的信息
						
						let Component = route.Component;
						return <Component  {...route.params}, navigator = navigator />
					
					需要push时	
						const navigator = this.props;
						navigator.push(someComponent);
			
					最重要的是navigator,用于主导push和pop。设置属性时，最重要的是renderScene，它也应该是个对象
						renderScene = { (route,navigator)=>{
							
						}}
					
					使用时
						navigator = this.props.navigator;
						navigator.push(name:'cp', component:FirstComponent,params:{a:'a1',b:'b1'});
						
						当下一个route开始渲染时，navigator里的render就开始起效
						navigator抠出了props（就是在当前页面里调用push时给的参数）,并帮当前页面生成了NextComponent，还把nav和当前页面给的{...props.params}给了这个新页面
						
						
						
			动画效果Animatiion:
					在RN中，动画能被应用于Text,View,Image
					效果有
						弹簧(spring)
						递减(Decay)
						衰减(timing)
					三种
					
					动画是异步操作，可通过parallel,sequence来控制动画的发起
					如
						Animated.sequence([
						// 一个滑动,越滑越慢的任务
						Animated.decay(
						position,
						{
						velocity:{},
						deceleration:0.997,
						}),
					
						// 一些并发的任务
						Animated.parallel([
						// 一个弹簧任务
						Animated.spring(
							position,
							{}
						),
						// 一个匀速运动
						Animated.timing(
							
						),
						]),										
					]).start();
				
					在一个越滑越慢的动画之后，开始一个弹簧任务和一个匀速任务
				
					动画的实现方式：将Animation单例的属性绑定到object的style上
					例如：
						1 在state里，创建一个Animated类型的变量
							this.state = {
								FadeAnim: new Animated.Value(0);
							}
							
						2 在生命周期的某个节点，触发此变量的改变
							componentDidMount(){
								Animated.timing{
								this.state.FadeAnim,
								{toValue:8},
							}					
						}	
					
						3 将此值和view,text的属性绑定起来
							<View style={{opacity:this.state.FadeAnim}} />
							这样就能看到动画效果
				
				
				#编码和解码#		
						字符集：抽象符号的合集
						编码规则：字符集和十六进制数的对应法则
						
						文本显示为乱码，是解码出了问题
						1、编码规则和解码规则不一致
						2、宿主机上没有对应的字符集
						
						在中国，一般的编码模式是GBK，包含简体和繁体中文
						而编辑器默认的编码规则是UTF-8 ，包含了地球上所有的抽象字符。常常需要将GBK转为UTF-8
						
						
				#网络编程基础知识#
						网络和数据库有类似处，URL用于定位资源（标志数据库），请求用于访问数据（操作数据）
								例如
						https://cn.bing.com/Search?q=%E9%B2%8D%E5%86%85%E6%96%AF%E6%B8%A9%E5%BE%B7%E7%B1%B3%E5%B0%94&mkt=zh-cn&FORM=BNLH

						https://cn.bing.com/Search 就是资源描述符，定位一个库
						后面的
						q=%E9%B2%8D%E5%86%85%E6%96%AF%E6%B8%A9%E5%BE%B7%E7%B1%B3%E5%B0%94
						&mkt=zh-cn
						&FORM=BNLH
						是数据库操作命令，用于访问数据

					网络传输时常用的格式是JSON 键值对的集合。
						其中的'值'可以是 string，也可以是对象{"a":"a1"} 、也可以是对象的集合
						{
							{
								"key":"value","key2":"value2",
							}
						}						
						
						JSON.stringify 可将json对象转为请求用的string
						JSON.parse 可将string转为json对象

						json和NSDictionary有联系,dictionary类型可转为json字符串
						值有三种形式 {},[],"", 第一种可以拓展出子集，第二第三种只能做值，没有拓展能力
					
					网络的基本概念有	
						session	
						Request
						Response
						表单
						ispostback(用页面于表征是否刷新)	
						
						比如在
							pageIsLoad里
							{	
								// 第一次加载
								if(!ispostback)
								{
									// 做初始化操作
								}
							}
							
							可防止F5刷新时重新加载页面，节约资源
							
							
					网络请求的流程
						浏览器请求资源 -> 服务器返回网页的html格式 ->  
					浏览器收集用户填写的表单，POST给服务端 -> 服务端获取请求，返回相应页面	
						
						加载初始页面 ->  填写表单 -> 提交表单并改变页面
						
			#封装组件#
					组件的渲染通过props实现
					如一个自己封装的MenuList
					// data是用于渲染的数据  click是事件
					<MenuList data = {data} click = {this.onPress} />

						